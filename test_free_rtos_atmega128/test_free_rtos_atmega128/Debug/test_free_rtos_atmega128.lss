
test_free_rtos_atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000009ec  00000a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063d  00800106  00800106  00000a86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000271b  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e39  00000000  00000000  00003407  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001587  00000000  00000000  00004240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000570  00000000  00000000  000057c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f30  00000000  00000000  00005d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001dd9  00000000  00000000  00006c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00008a41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f7 c1       	rjmp	.+1006   	; 0x420 <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 34       	cpi	r26, 0x43	; 67
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	91 c4       	rjmp	.+2338   	; 0x9e8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
	
	
	//////////////////////////////////
	
	//start scheduler
	vTaskStartScheduler();
  c8:	0d d3       	rcall	.+1562   	; 0x6e4 <vTaskStartScheduler>
  ca:	ff cf       	rjmp	.-2      	; 0xca <main+0x2>

000000cc <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
  cc:	fc 01       	movw	r30, r24
  ce:	03 96       	adiw	r24, 0x03	; 3
  d0:	92 83       	std	Z+2, r25	; 0x02
  d2:	81 83       	std	Z+1, r24	; 0x01
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	3f ef       	ldi	r19, 0xFF	; 255
  d8:	34 83       	std	Z+4, r19	; 0x04
  da:	23 83       	std	Z+3, r18	; 0x03
  dc:	96 83       	std	Z+6, r25	; 0x06
  de:	85 83       	std	Z+5, r24	; 0x05
  e0:	90 87       	std	Z+8, r25	; 0x08
  e2:	87 83       	std	Z+7, r24	; 0x07
  e4:	10 82       	st	Z, r1
  e6:	08 95       	ret

000000e8 <vListInitialiseItem>:
  e8:	fc 01       	movw	r30, r24
  ea:	11 86       	std	Z+9, r1	; 0x09
  ec:	10 86       	std	Z+8, r1	; 0x08
  ee:	08 95       	ret

000000f0 <vListInsertEnd>:
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	9c 01       	movw	r18, r24
  f6:	fb 01       	movw	r30, r22
  f8:	dc 01       	movw	r26, r24
  fa:	11 96       	adiw	r26, 0x01	; 1
  fc:	cd 91       	ld	r28, X+
  fe:	dc 91       	ld	r29, X
 100:	12 97       	sbiw	r26, 0x02	; 2
 102:	d3 83       	std	Z+3, r29	; 0x03
 104:	c2 83       	std	Z+2, r28	; 0x02
 106:	8c 81       	ldd	r24, Y+4	; 0x04
 108:	9d 81       	ldd	r25, Y+5	; 0x05
 10a:	95 83       	std	Z+5, r25	; 0x05
 10c:	84 83       	std	Z+4, r24	; 0x04
 10e:	8c 81       	ldd	r24, Y+4	; 0x04
 110:	9d 81       	ldd	r25, Y+5	; 0x05
 112:	dc 01       	movw	r26, r24
 114:	13 96       	adiw	r26, 0x03	; 3
 116:	7c 93       	st	X, r23
 118:	6e 93       	st	-X, r22
 11a:	12 97       	sbiw	r26, 0x02	; 2
 11c:	7d 83       	std	Y+5, r23	; 0x05
 11e:	6c 83       	std	Y+4, r22	; 0x04
 120:	31 87       	std	Z+9, r19	; 0x09
 122:	20 87       	std	Z+8, r18	; 0x08
 124:	f9 01       	movw	r30, r18
 126:	80 81       	ld	r24, Z
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	80 83       	st	Z, r24
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 138:	a0 85       	ldd	r26, Z+8	; 0x08
 13a:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 13c:	82 81       	ldd	r24, Z+2	; 0x02
 13e:	93 81       	ldd	r25, Z+3	; 0x03
 140:	24 81       	ldd	r18, Z+4	; 0x04
 142:	35 81       	ldd	r19, Z+5	; 0x05
 144:	ec 01       	movw	r28, r24
 146:	3d 83       	std	Y+5, r19	; 0x05
 148:	2c 83       	std	Y+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 14a:	c4 81       	ldd	r28, Z+4	; 0x04
 14c:	d5 81       	ldd	r29, Z+5	; 0x05
 14e:	9b 83       	std	Y+3, r25	; 0x03
 150:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 152:	11 96       	adiw	r26, 0x01	; 1
 154:	8d 91       	ld	r24, X+
 156:	9c 91       	ld	r25, X
 158:	12 97       	sbiw	r26, 0x02	; 2
 15a:	e8 17       	cp	r30, r24
 15c:	f9 07       	cpc	r31, r25
 15e:	21 f4       	brne	.+8      	; 0x168 <uxListRemove+0x36>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 160:	12 96       	adiw	r26, 0x02	; 2
 162:	dc 93       	st	X, r29
 164:	ce 93       	st	-X, r28
 166:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 168:	11 86       	std	Z+9, r1	; 0x09
 16a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 16c:	8c 91       	ld	r24, X
 16e:	81 50       	subi	r24, 0x01	; 1
 170:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 172:	8c 91       	ld	r24, X
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 17a:	31 e1       	ldi	r19, 0x11	; 17
 17c:	fc 01       	movw	r30, r24
 17e:	30 83       	st	Z, r19
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	22 e2       	ldi	r18, 0x22	; 34
 184:	20 83       	st	Z, r18
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	a3 e3       	ldi	r26, 0x33	; 51
 18a:	a0 83       	st	Z, r26
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	60 83       	st	Z, r22
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	70 83       	st	Z, r23
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	10 82       	st	Z, r1
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	60 e8       	ldi	r22, 0x80	; 128
 19c:	60 83       	st	Z, r22
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	10 82       	st	Z, r1
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	62 e0       	ldi	r22, 0x02	; 2
 1a6:	60 83       	st	Z, r22
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	63 e0       	ldi	r22, 0x03	; 3
 1ac:	60 83       	st	Z, r22
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	64 e0       	ldi	r22, 0x04	; 4
 1b2:	60 83       	st	Z, r22
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	65 e0       	ldi	r22, 0x05	; 5
 1b8:	60 83       	st	Z, r22
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	66 e0       	ldi	r22, 0x06	; 6
 1be:	60 83       	st	Z, r22
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	67 e0       	ldi	r22, 0x07	; 7
 1c4:	60 83       	st	Z, r22
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	68 e0       	ldi	r22, 0x08	; 8
 1ca:	60 83       	st	Z, r22
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	69 e0       	ldi	r22, 0x09	; 9
 1d0:	60 83       	st	Z, r22
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	60 e1       	ldi	r22, 0x10	; 16
 1d6:	60 83       	st	Z, r22
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	30 83       	st	Z, r19
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	32 e1       	ldi	r19, 0x12	; 18
 1e0:	30 83       	st	Z, r19
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	33 e1       	ldi	r19, 0x13	; 19
 1e6:	30 83       	st	Z, r19
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	34 e1       	ldi	r19, 0x14	; 20
 1ec:	30 83       	st	Z, r19
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	35 e1       	ldi	r19, 0x15	; 21
 1f2:	30 83       	st	Z, r19
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	36 e1       	ldi	r19, 0x16	; 22
 1f8:	30 83       	st	Z, r19
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	37 e1       	ldi	r19, 0x17	; 23
 1fe:	30 83       	st	Z, r19
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	38 e1       	ldi	r19, 0x18	; 24
 204:	30 83       	st	Z, r19
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	39 e1       	ldi	r19, 0x19	; 25
 20a:	30 83       	st	Z, r19
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	30 e2       	ldi	r19, 0x20	; 32
 210:	30 83       	st	Z, r19
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	31 e2       	ldi	r19, 0x21	; 33
 216:	30 83       	st	Z, r19
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	20 83       	st	Z, r18
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	23 e2       	ldi	r18, 0x23	; 35
 220:	20 83       	st	Z, r18
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	40 83       	st	Z, r20
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	50 83       	st	Z, r21
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	26 e2       	ldi	r18, 0x26	; 38
 22e:	20 83       	st	Z, r18
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	27 e2       	ldi	r18, 0x27	; 39
 234:	20 83       	st	Z, r18
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	28 e2       	ldi	r18, 0x28	; 40
 23a:	20 83       	st	Z, r18
 23c:	31 97       	sbiw	r30, 0x01	; 1
 23e:	29 e2       	ldi	r18, 0x29	; 41
 240:	20 83       	st	Z, r18
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	20 e3       	ldi	r18, 0x30	; 48
 246:	20 83       	st	Z, r18
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	21 e3       	ldi	r18, 0x31	; 49
 24c:	20 83       	st	Z, r18
 24e:	86 97       	sbiw	r24, 0x26	; 38
 250:	08 95       	ret

00000252 <xPortStartScheduler>:
 252:	1b bc       	out	0x2b, r1	; 43
 254:	8c e7       	ldi	r24, 0x7C	; 124
 256:	8a bd       	out	0x2a, r24	; 42
 258:	8b e0       	ldi	r24, 0x0B	; 11
 25a:	8e bd       	out	0x2e, r24	; 46
 25c:	87 b7       	in	r24, 0x37	; 55
 25e:	80 61       	ori	r24, 0x10	; 16
 260:	87 bf       	out	0x37, r24	; 55
 262:	a0 91 41 07 	lds	r26, 0x0741	; 0x800741 <pxCurrentTCB>
 266:	b0 91 42 07 	lds	r27, 0x0742	; 0x800742 <pxCurrentTCB+0x1>
 26a:	cd 91       	ld	r28, X+
 26c:	cd bf       	out	0x3d, r28	; 61
 26e:	dd 91       	ld	r29, X+
 270:	de bf       	out	0x3e, r29	; 62
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	ff 90       	pop	r15
 294:	ef 90       	pop	r14
 296:	df 90       	pop	r13
 298:	cf 90       	pop	r12
 29a:	bf 90       	pop	r11
 29c:	af 90       	pop	r10
 29e:	9f 90       	pop	r9
 2a0:	8f 90       	pop	r8
 2a2:	7f 90       	pop	r7
 2a4:	6f 90       	pop	r6
 2a6:	5f 90       	pop	r5
 2a8:	4f 90       	pop	r4
 2aa:	3f 90       	pop	r3
 2ac:	2f 90       	pop	r2
 2ae:	1f 90       	pop	r1
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	08 95       	ret
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	08 95       	ret

000002bc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	0f 92       	push	r0
 2c4:	1f 92       	push	r1
 2c6:	11 24       	eor	r1, r1
 2c8:	2f 92       	push	r2
 2ca:	3f 92       	push	r3
 2cc:	4f 92       	push	r4
 2ce:	5f 92       	push	r5
 2d0:	6f 92       	push	r6
 2d2:	7f 92       	push	r7
 2d4:	8f 92       	push	r8
 2d6:	9f 92       	push	r9
 2d8:	af 92       	push	r10
 2da:	bf 92       	push	r11
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
 304:	a0 91 41 07 	lds	r26, 0x0741	; 0x800741 <pxCurrentTCB>
 308:	b0 91 42 07 	lds	r27, 0x0742	; 0x800742 <pxCurrentTCB+0x1>
 30c:	0d b6       	in	r0, 0x3d	; 61
 30e:	0d 92       	st	X+, r0
 310:	0e b6       	in	r0, 0x3e	; 62
 312:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 314:	26 d3       	rcall	.+1612   	; 0x962 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 316:	a0 91 41 07 	lds	r26, 0x0741	; 0x800741 <pxCurrentTCB>
 31a:	b0 91 42 07 	lds	r27, 0x0742	; 0x800742 <pxCurrentTCB+0x1>
 31e:	cd 91       	ld	r28, X+
 320:	cd bf       	out	0x3d, r28	; 61
 322:	dd 91       	ld	r29, X+
 324:	de bf       	out	0x3e, r29	; 62
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	df 90       	pop	r13
 34c:	cf 90       	pop	r12
 34e:	bf 90       	pop	r11
 350:	af 90       	pop	r10
 352:	9f 90       	pop	r9
 354:	8f 90       	pop	r8
 356:	7f 90       	pop	r7
 358:	6f 90       	pop	r6
 35a:	5f 90       	pop	r5
 35c:	4f 90       	pop	r4
 35e:	3f 90       	pop	r3
 360:	2f 90       	pop	r2
 362:	1f 90       	pop	r1
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0

	asm volatile ( "ret" );
 36a:	08 95       	ret

0000036c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	0f 92       	push	r0
 374:	1f 92       	push	r1
 376:	11 24       	eor	r1, r1
 378:	2f 92       	push	r2
 37a:	3f 92       	push	r3
 37c:	4f 92       	push	r4
 37e:	5f 92       	push	r5
 380:	6f 92       	push	r6
 382:	7f 92       	push	r7
 384:	8f 92       	push	r8
 386:	9f 92       	push	r9
 388:	af 92       	push	r10
 38a:	bf 92       	push	r11
 38c:	cf 92       	push	r12
 38e:	df 92       	push	r13
 390:	ef 92       	push	r14
 392:	ff 92       	push	r15
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	2f 93       	push	r18
 39a:	3f 93       	push	r19
 39c:	4f 93       	push	r20
 39e:	5f 93       	push	r21
 3a0:	6f 93       	push	r22
 3a2:	7f 93       	push	r23
 3a4:	8f 93       	push	r24
 3a6:	9f 93       	push	r25
 3a8:	af 93       	push	r26
 3aa:	bf 93       	push	r27
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
 3b4:	a0 91 41 07 	lds	r26, 0x0741	; 0x800741 <pxCurrentTCB>
 3b8:	b0 91 42 07 	lds	r27, 0x0742	; 0x800742 <pxCurrentTCB+0x1>
 3bc:	0d b6       	in	r0, 0x3d	; 61
 3be:	0d 92       	st	X+, r0
 3c0:	0e b6       	in	r0, 0x3e	; 62
 3c2:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 3c4:	bd d1       	rcall	.+890    	; 0x740 <xTaskIncrementTick>
 3c6:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 3c8:	cc d2       	rcall	.+1432   	; 0x962 <vTaskSwitchContext>
 3ca:	a0 91 41 07 	lds	r26, 0x0741	; 0x800741 <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 3ce:	b0 91 42 07 	lds	r27, 0x0742	; 0x800742 <pxCurrentTCB+0x1>
 3d2:	cd 91       	ld	r28, X+
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	dd 91       	ld	r29, X+
 3d8:	de bf       	out	0x3e, r29	; 62
 3da:	ff 91       	pop	r31
 3dc:	ef 91       	pop	r30
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	bf 91       	pop	r27
 3e4:	af 91       	pop	r26
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	7f 91       	pop	r23
 3ec:	6f 91       	pop	r22
 3ee:	5f 91       	pop	r21
 3f0:	4f 91       	pop	r20
 3f2:	3f 91       	pop	r19
 3f4:	2f 91       	pop	r18
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	ff 90       	pop	r15
 3fc:	ef 90       	pop	r14
 3fe:	df 90       	pop	r13
 400:	cf 90       	pop	r12
 402:	bf 90       	pop	r11
 404:	af 90       	pop	r10
 406:	9f 90       	pop	r9
 408:	8f 90       	pop	r8
 40a:	7f 90       	pop	r7
 40c:	6f 90       	pop	r6
 40e:	5f 90       	pop	r5
 410:	4f 90       	pop	r4
 412:	3f 90       	pop	r3
 414:	2f 90       	pop	r2
 416:	1f 90       	pop	r1
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	08 95       	ret

00000420 <__vector_12>:

	asm volatile ( "ret" );
 420:	a5 df       	rcall	.-182    	; 0x36c <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect(void) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect(void) 
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 422:	18 95       	reti

00000424 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
 42a:	84 d1       	rcall	.+776    	; 0x734 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 42c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 430:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 434:	89 2b       	or	r24, r25
 436:	31 f4       	brne	.+12     	; 0x444 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 438:	8b e0       	ldi	r24, 0x0B	; 11
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 440:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 444:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <xNextFreeByte>
 448:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <xNextFreeByte+0x1>
 44c:	c9 01       	movw	r24, r18
 44e:	8c 0f       	add	r24, r28
 450:	9d 1f       	adc	r25, r29
 452:	8b 3d       	cpi	r24, 0xDB	; 219
 454:	45 e0       	ldi	r20, 0x05	; 5
 456:	94 07       	cpc	r25, r20
 458:	70 f4       	brcc	.+28     	; 0x476 <pvPortMalloc+0x52>
 45a:	28 17       	cp	r18, r24
 45c:	39 07       	cpc	r19, r25
 45e:	58 f4       	brcc	.+22     	; 0x476 <pvPortMalloc+0x52>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 460:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <__data_end>
 464:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <__data_end+0x1>
 468:	c2 0f       	add	r28, r18
 46a:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 46c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <xNextFreeByte+0x1>
 470:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <xNextFreeByte>
 474:	02 c0       	rjmp	.+4      	; 0x47a <pvPortMalloc+0x56>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 476:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 478:	d0 e0       	ldi	r29, 0x00	; 0
 47a:	0a d2       	rcall	.+1044   	; 0x890 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 47c:	ce 01       	movw	r24, r28
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 484:	08 95       	ret

00000486 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 486:	e0 91 09 07 	lds	r30, 0x0709	; 0x800709 <pxDelayedTaskList>
 48a:	f0 91 0a 07 	lds	r31, 0x070A	; 0x80070a <pxDelayedTaskList+0x1>
 48e:	80 81       	ld	r24, Z
 490:	81 11       	cpse	r24, r1
 492:	03 c0       	rjmp	.+6      	; 0x49a <prvResetNextTaskUnblockTime+0x14>
 494:	8f ef       	ldi	r24, 0xFF	; 255
 496:	9f ef       	ldi	r25, 0xFF	; 255
 498:	0c c0       	rjmp	.+24     	; 0x4b2 <prvResetNextTaskUnblockTime+0x2c>
 49a:	e0 91 09 07 	lds	r30, 0x0709	; 0x800709 <pxDelayedTaskList>
 49e:	f0 91 0a 07 	lds	r31, 0x070A	; 0x80070a <pxDelayedTaskList+0x1>
 4a2:	05 80       	ldd	r0, Z+5	; 0x05
 4a4:	f6 81       	ldd	r31, Z+6	; 0x06
 4a6:	e0 2d       	mov	r30, r0
 4a8:	06 80       	ldd	r0, Z+6	; 0x06
 4aa:	f7 81       	ldd	r31, Z+7	; 0x07
 4ac:	e0 2d       	mov	r30, r0
 4ae:	82 81       	ldd	r24, Z+2	; 0x02
 4b0:	93 81       	ldd	r25, Z+3	; 0x03
 4b2:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <xNextTaskUnblockTime+0x1>
 4b6:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <xNextTaskUnblockTime>
 4ba:	08 95       	ret

000004bc <prvIdleTask>:
 4bc:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxDeletedTasksWaitingCleanUp>
 4c0:	88 23       	and	r24, r24
 4c2:	f1 f0       	breq	.+60     	; 0x500 <prvIdleTask+0x44>
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	0f 92       	push	r0
 4ca:	e0 91 fa 06 	lds	r30, 0x06FA	; 0x8006fa <xTasksWaitingTermination+0x5>
 4ce:	f0 91 fb 06 	lds	r31, 0x06FB	; 0x8006fb <xTasksWaitingTermination+0x6>
 4d2:	c6 81       	ldd	r28, Z+6	; 0x06
 4d4:	d7 81       	ldd	r29, Z+7	; 0x07
 4d6:	ce 01       	movw	r24, r28
 4d8:	02 96       	adiw	r24, 0x02	; 2
 4da:	2b de       	rcall	.-938    	; 0x132 <uxListRemove>
 4dc:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxCurrentNumberOfTasks>
 4e0:	81 50       	subi	r24, 0x01	; 1
 4e2:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <uxCurrentNumberOfTasks>
 4e6:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxDeletedTasksWaitingCleanUp>
 4ea:	81 50       	subi	r24, 0x01	; 1
 4ec:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <uxDeletedTasksWaitingCleanUp>
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	8f 89       	ldd	r24, Y+23	; 0x17
 4f6:	98 8d       	ldd	r25, Y+24	; 0x18
 4f8:	c5 df       	rcall	.-118    	; 0x484 <vPortFree>
 4fa:	ce 01       	movw	r24, r28
 4fc:	c3 df       	rcall	.-122    	; 0x484 <vPortFree>
 4fe:	de cf       	rjmp	.-68     	; 0x4bc <prvIdleTask>
 500:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <pxReadyTasksLists>
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	d0 f2       	brcs	.-76     	; 0x4bc <prvIdleTask>
 508:	d9 de       	rcall	.-590    	; 0x2bc <vPortYield>
 50a:	d8 cf       	rjmp	.-80     	; 0x4bc <prvIdleTask>

0000050c <xTaskCreate>:
 50c:	3f 92       	push	r3
 50e:	4f 92       	push	r4
 510:	5f 92       	push	r5
 512:	6f 92       	push	r6
 514:	7f 92       	push	r7
 516:	8f 92       	push	r8
 518:	9f 92       	push	r9
 51a:	af 92       	push	r10
 51c:	bf 92       	push	r11
 51e:	cf 92       	push	r12
 520:	df 92       	push	r13
 522:	ef 92       	push	r14
 524:	ff 92       	push	r15
 526:	0f 93       	push	r16
 528:	1f 93       	push	r17
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	4c 01       	movw	r8, r24
 530:	16 2f       	mov	r17, r22
 532:	37 2e       	mov	r3, r23
 534:	6a 01       	movw	r12, r20
 536:	59 01       	movw	r10, r18
 538:	ca 01       	movw	r24, r20
 53a:	74 df       	rcall	.-280    	; 0x424 <pvPortMalloc>
 53c:	2c 01       	movw	r4, r24
 53e:	89 2b       	or	r24, r25
 540:	09 f4       	brne	.+2      	; 0x544 <xTaskCreate+0x38>
 542:	bd c0       	rjmp	.+378    	; 0x6be <xTaskCreate+0x1b2>
 544:	86 e2       	ldi	r24, 0x26	; 38
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	6d df       	rcall	.-294    	; 0x424 <pvPortMalloc>
 54a:	ec 01       	movw	r28, r24
 54c:	89 2b       	or	r24, r25
 54e:	79 f0       	breq	.+30     	; 0x56e <xTaskCreate+0x62>
 550:	58 8e       	std	Y+24, r5	; 0x18
 552:	4f 8a       	std	Y+23, r4	; 0x17
 554:	c6 01       	movw	r24, r12
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	32 01       	movw	r6, r4
 55a:	68 0e       	add	r6, r24
 55c:	79 1e       	adc	r7, r25
 55e:	be 01       	movw	r22, r28
 560:	67 5e       	subi	r22, 0xE7	; 231
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	e1 2f       	mov	r30, r17
 566:	f3 2d       	mov	r31, r3
 568:	cf 01       	movw	r24, r30
 56a:	08 96       	adiw	r24, 0x08	; 8
 56c:	06 c0       	rjmp	.+12     	; 0x57a <xTaskCreate+0x6e>
 56e:	c2 01       	movw	r24, r4
 570:	89 df       	rcall	.-238    	; 0x484 <vPortFree>
 572:	a5 c0       	rjmp	.+330    	; 0x6be <xTaskCreate+0x1b2>
 574:	e8 17       	cp	r30, r24
 576:	f9 07       	cpc	r31, r25
 578:	49 f0       	breq	.+18     	; 0x58c <xTaskCreate+0x80>
 57a:	9f 01       	movw	r18, r30
 57c:	41 91       	ld	r20, Z+
 57e:	db 01       	movw	r26, r22
 580:	4d 93       	st	X+, r20
 582:	bd 01       	movw	r22, r26
 584:	d9 01       	movw	r26, r18
 586:	2c 91       	ld	r18, X
 588:	21 11       	cpse	r18, r1
 58a:	f4 cf       	rjmp	.-24     	; 0x574 <xTaskCreate+0x68>
 58c:	18 a2       	std	Y+32, r1	; 0x20
 58e:	04 30       	cpi	r16, 0x04	; 4
 590:	08 f0       	brcs	.+2      	; 0x594 <xTaskCreate+0x88>
 592:	03 e0       	ldi	r16, 0x03	; 3
 594:	0e 8b       	std	Y+22, r16	; 0x16
 596:	6e 01       	movw	r12, r28
 598:	b2 e0       	ldi	r27, 0x02	; 2
 59a:	cb 0e       	add	r12, r27
 59c:	d1 1c       	adc	r13, r1
 59e:	c6 01       	movw	r24, r12
 5a0:	a3 dd       	rcall	.-1210   	; 0xe8 <vListInitialiseItem>
 5a2:	ce 01       	movw	r24, r28
 5a4:	0c 96       	adiw	r24, 0x0c	; 12
 5a6:	a0 dd       	rcall	.-1216   	; 0xe8 <vListInitialiseItem>
 5a8:	d9 87       	std	Y+9, r29	; 0x09
 5aa:	c8 87       	std	Y+8, r28	; 0x08
 5ac:	84 e0       	ldi	r24, 0x04	; 4
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	80 1b       	sub	r24, r16
 5b2:	91 09       	sbc	r25, r1
 5b4:	9d 87       	std	Y+13, r25	; 0x0d
 5b6:	8c 87       	std	Y+12, r24	; 0x0c
 5b8:	db 8b       	std	Y+19, r29	; 0x13
 5ba:	ca 8b       	std	Y+18, r28	; 0x12
 5bc:	19 a2       	std	Y+33, r1	; 0x21
 5be:	1a a2       	std	Y+34, r1	; 0x22
 5c0:	1b a2       	std	Y+35, r1	; 0x23
 5c2:	1c a2       	std	Y+36, r1	; 0x24
 5c4:	1d a2       	std	Y+37, r1	; 0x25
 5c6:	a5 01       	movw	r20, r10
 5c8:	b4 01       	movw	r22, r8
 5ca:	c3 01       	movw	r24, r6
 5cc:	d6 dd       	rcall	.-1108   	; 0x17a <pxPortInitialiseStack>
 5ce:	99 83       	std	Y+1, r25	; 0x01
 5d0:	88 83       	st	Y, r24
 5d2:	e1 14       	cp	r14, r1
 5d4:	f1 04       	cpc	r15, r1
 5d6:	19 f0       	breq	.+6      	; 0x5de <xTaskCreate+0xd2>
 5d8:	f7 01       	movw	r30, r14
 5da:	d1 83       	std	Z+1, r29	; 0x01
 5dc:	c0 83       	st	Z, r28
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	f8 94       	cli
 5e2:	0f 92       	push	r0
 5e4:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxCurrentNumberOfTasks>
 5e8:	8f 5f       	subi	r24, 0xFF	; 255
 5ea:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <uxCurrentNumberOfTasks>
 5ee:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <pxCurrentTCB>
 5f2:	90 91 42 07 	lds	r25, 0x0742	; 0x800742 <pxCurrentTCB+0x1>
 5f6:	89 2b       	or	r24, r25
 5f8:	69 f5       	brne	.+90     	; 0x654 <xTaskCreate+0x148>
 5fa:	d0 93 42 07 	sts	0x0742, r29	; 0x800742 <pxCurrentTCB+0x1>
 5fe:	c0 93 41 07 	sts	0x0741, r28	; 0x800741 <pxCurrentTCB>
 602:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxCurrentNumberOfTasks>
 606:	81 30       	cpi	r24, 0x01	; 1
 608:	a9 f5       	brne	.+106    	; 0x674 <xTaskCreate+0x168>
 60a:	8d e1       	ldi	r24, 0x1D	; 29
 60c:	97 e0       	ldi	r25, 0x07	; 7
 60e:	5e dd       	rcall	.-1348   	; 0xcc <vListInitialise>
 610:	86 e2       	ldi	r24, 0x26	; 38
 612:	97 e0       	ldi	r25, 0x07	; 7
 614:	5b dd       	rcall	.-1354   	; 0xcc <vListInitialise>
 616:	8f e2       	ldi	r24, 0x2F	; 47
 618:	97 e0       	ldi	r25, 0x07	; 7
 61a:	58 dd       	rcall	.-1360   	; 0xcc <vListInitialise>
 61c:	88 e3       	ldi	r24, 0x38	; 56
 61e:	97 e0       	ldi	r25, 0x07	; 7
 620:	55 dd       	rcall	.-1366   	; 0xcc <vListInitialise>
 622:	84 e1       	ldi	r24, 0x14	; 20
 624:	97 e0       	ldi	r25, 0x07	; 7
 626:	52 dd       	rcall	.-1372   	; 0xcc <vListInitialise>
 628:	8b e0       	ldi	r24, 0x0B	; 11
 62a:	97 e0       	ldi	r25, 0x07	; 7
 62c:	4f dd       	rcall	.-1378   	; 0xcc <vListInitialise>
 62e:	8e ef       	ldi	r24, 0xFE	; 254
 630:	96 e0       	ldi	r25, 0x06	; 6
 632:	4c dd       	rcall	.-1384   	; 0xcc <vListInitialise>
 634:	85 ef       	ldi	r24, 0xF5	; 245
 636:	96 e0       	ldi	r25, 0x06	; 6
 638:	49 dd       	rcall	.-1390   	; 0xcc <vListInitialise>
 63a:	84 e1       	ldi	r24, 0x14	; 20
 63c:	97 e0       	ldi	r25, 0x07	; 7
 63e:	90 93 0a 07 	sts	0x070A, r25	; 0x80070a <pxDelayedTaskList+0x1>
 642:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <pxDelayedTaskList>
 646:	8b e0       	ldi	r24, 0x0B	; 11
 648:	97 e0       	ldi	r25, 0x07	; 7
 64a:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <pxOverflowDelayedTaskList+0x1>
 64e:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <pxOverflowDelayedTaskList>
 652:	10 c0       	rjmp	.+32     	; 0x674 <xTaskCreate+0x168>
 654:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <xSchedulerRunning>
 658:	81 11       	cpse	r24, r1
 65a:	0c c0       	rjmp	.+24     	; 0x674 <xTaskCreate+0x168>
 65c:	e0 91 41 07 	lds	r30, 0x0741	; 0x800741 <pxCurrentTCB>
 660:	f0 91 42 07 	lds	r31, 0x0742	; 0x800742 <pxCurrentTCB+0x1>
 664:	96 89       	ldd	r25, Z+22	; 0x16
 666:	8e 89       	ldd	r24, Y+22	; 0x16
 668:	89 17       	cp	r24, r25
 66a:	20 f0       	brcs	.+8      	; 0x674 <xTaskCreate+0x168>
 66c:	d0 93 42 07 	sts	0x0742, r29	; 0x800742 <pxCurrentTCB+0x1>
 670:	c0 93 41 07 	sts	0x0741, r28	; 0x800741 <pxCurrentTCB>
 674:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <uxTaskNumber>
 678:	8f 5f       	subi	r24, 0xFF	; 255
 67a:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <uxTaskNumber>
 67e:	8e 89       	ldd	r24, Y+22	; 0x16
 680:	90 91 f0 06 	lds	r25, 0x06F0	; 0x8006f0 <uxTopReadyPriority>
 684:	98 17       	cp	r25, r24
 686:	10 f4       	brcc	.+4      	; 0x68c <xTaskCreate+0x180>
 688:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxTopReadyPriority>
 68c:	f9 e0       	ldi	r31, 0x09	; 9
 68e:	8f 9f       	mul	r24, r31
 690:	c0 01       	movw	r24, r0
 692:	11 24       	eor	r1, r1
 694:	b6 01       	movw	r22, r12
 696:	83 5e       	subi	r24, 0xE3	; 227
 698:	98 4f       	sbci	r25, 0xF8	; 248
 69a:	2a dd       	rcall	.-1452   	; 0xf0 <vListInsertEnd>
 69c:	0f 90       	pop	r0
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <xSchedulerRunning>
 6a4:	88 23       	and	r24, r24
 6a6:	49 f0       	breq	.+18     	; 0x6ba <xTaskCreate+0x1ae>
 6a8:	e0 91 41 07 	lds	r30, 0x0741	; 0x800741 <pxCurrentTCB>
 6ac:	f0 91 42 07 	lds	r31, 0x0742	; 0x800742 <pxCurrentTCB+0x1>
 6b0:	96 89       	ldd	r25, Z+22	; 0x16
 6b2:	8e 89       	ldd	r24, Y+22	; 0x16
 6b4:	98 17       	cp	r25, r24
 6b6:	08 f4       	brcc	.+2      	; 0x6ba <xTaskCreate+0x1ae>
 6b8:	01 de       	rcall	.-1022   	; 0x2bc <vPortYield>
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <xTaskCreate+0x1b4>
 6be:	8f ef       	ldi	r24, 0xFF	; 255
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	1f 91       	pop	r17
 6c6:	0f 91       	pop	r16
 6c8:	ff 90       	pop	r15
 6ca:	ef 90       	pop	r14
 6cc:	df 90       	pop	r13
 6ce:	cf 90       	pop	r12
 6d0:	bf 90       	pop	r11
 6d2:	af 90       	pop	r10
 6d4:	9f 90       	pop	r9
 6d6:	8f 90       	pop	r8
 6d8:	7f 90       	pop	r7
 6da:	6f 90       	pop	r6
 6dc:	5f 90       	pop	r5
 6de:	4f 90       	pop	r4
 6e0:	3f 90       	pop	r3
 6e2:	08 95       	ret

000006e4 <vTaskStartScheduler>:
 6e4:	ef 92       	push	r14
 6e6:	ff 92       	push	r15
 6e8:	0f 93       	push	r16
 6ea:	87 ee       	ldi	r24, 0xE7	; 231
 6ec:	e8 2e       	mov	r14, r24
 6ee:	86 e0       	ldi	r24, 0x06	; 6
 6f0:	f8 2e       	mov	r15, r24
 6f2:	00 e0       	ldi	r16, 0x00	; 0
 6f4:	20 e0       	ldi	r18, 0x00	; 0
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	45 e5       	ldi	r20, 0x55	; 85
 6fa:	50 e0       	ldi	r21, 0x00	; 0
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	71 e0       	ldi	r23, 0x01	; 1
 700:	8e e5       	ldi	r24, 0x5E	; 94
 702:	92 e0       	ldi	r25, 0x02	; 2
 704:	03 df       	rcall	.-506    	; 0x50c <xTaskCreate>
 706:	81 30       	cpi	r24, 0x01	; 1
 708:	89 f4       	brne	.+34     	; 0x72c <vTaskStartScheduler+0x48>
 70a:	f8 94       	cli
 70c:	2f ef       	ldi	r18, 0xFF	; 255
 70e:	3f ef       	ldi	r19, 0xFF	; 255
 710:	30 93 ea 06 	sts	0x06EA, r19	; 0x8006ea <xNextTaskUnblockTime+0x1>
 714:	20 93 e9 06 	sts	0x06E9, r18	; 0x8006e9 <xNextTaskUnblockTime>
 718:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <xSchedulerRunning>
 71c:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <xTickCount+0x1>
 720:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <xTickCount>
 724:	0f 91       	pop	r16
 726:	ff 90       	pop	r15
 728:	ef 90       	pop	r14
 72a:	93 cd       	rjmp	.-1242   	; 0x252 <xPortStartScheduler>
 72c:	0f 91       	pop	r16
 72e:	ff 90       	pop	r15
 730:	ef 90       	pop	r14
 732:	08 95       	ret

00000734 <vTaskSuspendAll>:
 734:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <uxSchedulerSuspended>
 738:	8f 5f       	subi	r24, 0xFF	; 255
 73a:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <uxSchedulerSuspended>
 73e:	08 95       	ret

00000740 <xTaskIncrementTick>:
 740:	cf 92       	push	r12
 742:	df 92       	push	r13
 744:	ef 92       	push	r14
 746:	ff 92       	push	r15
 748:	0f 93       	push	r16
 74a:	1f 93       	push	r17
 74c:	cf 93       	push	r28
 74e:	df 93       	push	r29
 750:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <uxSchedulerSuspended>
 754:	81 11       	cpse	r24, r1
 756:	88 c0       	rjmp	.+272    	; 0x868 <xTaskIncrementTick+0x128>
 758:	00 91 f1 06 	lds	r16, 0x06F1	; 0x8006f1 <xTickCount>
 75c:	10 91 f2 06 	lds	r17, 0x06F2	; 0x8006f2 <xTickCount+0x1>
 760:	0f 5f       	subi	r16, 0xFF	; 255
 762:	1f 4f       	sbci	r17, 0xFF	; 255
 764:	10 93 f2 06 	sts	0x06F2, r17	; 0x8006f2 <xTickCount+0x1>
 768:	00 93 f1 06 	sts	0x06F1, r16	; 0x8006f1 <xTickCount>
 76c:	01 15       	cp	r16, r1
 76e:	11 05       	cpc	r17, r1
 770:	b1 f4       	brne	.+44     	; 0x79e <xTaskIncrementTick+0x5e>
 772:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <pxDelayedTaskList>
 776:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <pxDelayedTaskList+0x1>
 77a:	20 91 07 07 	lds	r18, 0x0707	; 0x800707 <pxOverflowDelayedTaskList>
 77e:	30 91 08 07 	lds	r19, 0x0708	; 0x800708 <pxOverflowDelayedTaskList+0x1>
 782:	30 93 0a 07 	sts	0x070A, r19	; 0x80070a <pxDelayedTaskList+0x1>
 786:	20 93 09 07 	sts	0x0709, r18	; 0x800709 <pxDelayedTaskList>
 78a:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <pxOverflowDelayedTaskList+0x1>
 78e:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <pxOverflowDelayedTaskList>
 792:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <xNumOfOverflows>
 796:	8f 5f       	subi	r24, 0xFF	; 255
 798:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <xNumOfOverflows>
 79c:	74 de       	rcall	.-792    	; 0x486 <prvResetNextTaskUnblockTime>
 79e:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <xNextTaskUnblockTime>
 7a2:	90 91 ea 06 	lds	r25, 0x06EA	; 0x8006ea <xNextTaskUnblockTime+0x1>
 7a6:	c0 e0       	ldi	r28, 0x00	; 0
 7a8:	08 17       	cp	r16, r24
 7aa:	19 07       	cpc	r17, r25
 7ac:	08 f4       	brcc	.+2      	; 0x7b0 <xTaskIncrementTick+0x70>
 7ae:	4c c0       	rjmp	.+152    	; 0x848 <xTaskIncrementTick+0x108>
 7b0:	d9 e0       	ldi	r29, 0x09	; 9
 7b2:	e0 91 09 07 	lds	r30, 0x0709	; 0x800709 <pxDelayedTaskList>
 7b6:	f0 91 0a 07 	lds	r31, 0x070A	; 0x80070a <pxDelayedTaskList+0x1>
 7ba:	80 81       	ld	r24, Z
 7bc:	81 11       	cpse	r24, r1
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <xTaskIncrementTick+0x86>
 7c0:	8f ef       	ldi	r24, 0xFF	; 255
 7c2:	9f ef       	ldi	r25, 0xFF	; 255
 7c4:	11 c0       	rjmp	.+34     	; 0x7e8 <xTaskIncrementTick+0xa8>
 7c6:	e0 91 09 07 	lds	r30, 0x0709	; 0x800709 <pxDelayedTaskList>
 7ca:	f0 91 0a 07 	lds	r31, 0x070A	; 0x80070a <pxDelayedTaskList+0x1>
 7ce:	05 80       	ldd	r0, Z+5	; 0x05
 7d0:	f6 81       	ldd	r31, Z+6	; 0x06
 7d2:	e0 2d       	mov	r30, r0
 7d4:	e6 80       	ldd	r14, Z+6	; 0x06
 7d6:	f7 80       	ldd	r15, Z+7	; 0x07
 7d8:	d7 01       	movw	r26, r14
 7da:	12 96       	adiw	r26, 0x02	; 2
 7dc:	8d 91       	ld	r24, X+
 7de:	9c 91       	ld	r25, X
 7e0:	13 97       	sbiw	r26, 0x03	; 3
 7e2:	08 17       	cp	r16, r24
 7e4:	19 07       	cpc	r17, r25
 7e6:	28 f4       	brcc	.+10     	; 0x7f2 <xTaskIncrementTick+0xb2>
 7e8:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <xNextTaskUnblockTime+0x1>
 7ec:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <xNextTaskUnblockTime>
 7f0:	2b c0       	rjmp	.+86     	; 0x848 <xTaskIncrementTick+0x108>
 7f2:	67 01       	movw	r12, r14
 7f4:	b2 e0       	ldi	r27, 0x02	; 2
 7f6:	cb 0e       	add	r12, r27
 7f8:	d1 1c       	adc	r13, r1
 7fa:	c6 01       	movw	r24, r12
 7fc:	9a dc       	rcall	.-1740   	; 0x132 <uxListRemove>
 7fe:	f7 01       	movw	r30, r14
 800:	84 89       	ldd	r24, Z+20	; 0x14
 802:	95 89       	ldd	r25, Z+21	; 0x15
 804:	89 2b       	or	r24, r25
 806:	19 f0       	breq	.+6      	; 0x80e <xTaskIncrementTick+0xce>
 808:	c7 01       	movw	r24, r14
 80a:	0c 96       	adiw	r24, 0x0c	; 12
 80c:	92 dc       	rcall	.-1756   	; 0x132 <uxListRemove>
 80e:	d7 01       	movw	r26, r14
 810:	56 96       	adiw	r26, 0x16	; 22
 812:	8c 91       	ld	r24, X
 814:	90 91 f0 06 	lds	r25, 0x06F0	; 0x8006f0 <uxTopReadyPriority>
 818:	98 17       	cp	r25, r24
 81a:	10 f4       	brcc	.+4      	; 0x820 <xTaskIncrementTick+0xe0>
 81c:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxTopReadyPriority>
 820:	d8 9f       	mul	r29, r24
 822:	c0 01       	movw	r24, r0
 824:	11 24       	eor	r1, r1
 826:	b6 01       	movw	r22, r12
 828:	83 5e       	subi	r24, 0xE3	; 227
 82a:	98 4f       	sbci	r25, 0xF8	; 248
 82c:	61 dc       	rcall	.-1854   	; 0xf0 <vListInsertEnd>
 82e:	e0 91 41 07 	lds	r30, 0x0741	; 0x800741 <pxCurrentTCB>
 832:	f0 91 42 07 	lds	r31, 0x0742	; 0x800742 <pxCurrentTCB+0x1>
 836:	d7 01       	movw	r26, r14
 838:	56 96       	adiw	r26, 0x16	; 22
 83a:	9c 91       	ld	r25, X
 83c:	86 89       	ldd	r24, Z+22	; 0x16
 83e:	98 17       	cp	r25, r24
 840:	08 f4       	brcc	.+2      	; 0x844 <xTaskIncrementTick+0x104>
 842:	b7 cf       	rjmp	.-146    	; 0x7b2 <xTaskIncrementTick+0x72>
 844:	c1 e0       	ldi	r28, 0x01	; 1
 846:	b5 cf       	rjmp	.-150    	; 0x7b2 <xTaskIncrementTick+0x72>
 848:	e0 91 41 07 	lds	r30, 0x0741	; 0x800741 <pxCurrentTCB>
 84c:	f0 91 42 07 	lds	r31, 0x0742	; 0x800742 <pxCurrentTCB+0x1>
 850:	e6 89       	ldd	r30, Z+22	; 0x16
 852:	b9 e0       	ldi	r27, 0x09	; 9
 854:	eb 9f       	mul	r30, r27
 856:	f0 01       	movw	r30, r0
 858:	11 24       	eor	r1, r1
 85a:	e3 5e       	subi	r30, 0xE3	; 227
 85c:	f8 4f       	sbci	r31, 0xF8	; 248
 85e:	80 81       	ld	r24, Z
 860:	82 30       	cpi	r24, 0x02	; 2
 862:	40 f0       	brcs	.+16     	; 0x874 <xTaskIncrementTick+0x134>
 864:	c1 e0       	ldi	r28, 0x01	; 1
 866:	06 c0       	rjmp	.+12     	; 0x874 <xTaskIncrementTick+0x134>
 868:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <uxPendedTicks>
 86c:	8f 5f       	subi	r24, 0xFF	; 255
 86e:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <uxPendedTicks>
 872:	c0 e0       	ldi	r28, 0x00	; 0
 874:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <xYieldPending>
 878:	81 11       	cpse	r24, r1
 87a:	c1 e0       	ldi	r28, 0x01	; 1
 87c:	8c 2f       	mov	r24, r28
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	1f 91       	pop	r17
 884:	0f 91       	pop	r16
 886:	ff 90       	pop	r15
 888:	ef 90       	pop	r14
 88a:	df 90       	pop	r13
 88c:	cf 90       	pop	r12
 88e:	08 95       	ret

00000890 <xTaskResumeAll>:
 890:	ef 92       	push	r14
 892:	ff 92       	push	r15
 894:	0f 93       	push	r16
 896:	1f 93       	push	r17
 898:	cf 93       	push	r28
 89a:	df 93       	push	r29
 89c:	0f b6       	in	r0, 0x3f	; 63
 89e:	f8 94       	cli
 8a0:	0f 92       	push	r0
 8a2:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <uxSchedulerSuspended>
 8a6:	81 50       	subi	r24, 0x01	; 1
 8a8:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <uxSchedulerSuspended>
 8ac:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <uxSchedulerSuspended>
 8b0:	88 23       	and	r24, r24
 8b2:	11 f0       	breq	.+4      	; 0x8b8 <xTaskResumeAll+0x28>
 8b4:	80 e0       	ldi	r24, 0x00	; 0
 8b6:	4c c0       	rjmp	.+152    	; 0x950 <xTaskResumeAll+0xc0>
 8b8:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxCurrentNumberOfTasks>
 8bc:	88 23       	and	r24, r24
 8be:	d1 f3       	breq	.-12     	; 0x8b4 <xTaskResumeAll+0x24>
 8c0:	c0 e0       	ldi	r28, 0x00	; 0
 8c2:	d0 e0       	ldi	r29, 0x00	; 0
 8c4:	89 e0       	ldi	r24, 0x09	; 9
 8c6:	f8 2e       	mov	r15, r24
 8c8:	ee 24       	eor	r14, r14
 8ca:	e3 94       	inc	r14
 8cc:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <xPendingReadyList>
 8d0:	88 23       	and	r24, r24
 8d2:	39 f1       	breq	.+78     	; 0x922 <xTaskResumeAll+0x92>
 8d4:	e0 91 03 07 	lds	r30, 0x0703	; 0x800703 <xPendingReadyList+0x5>
 8d8:	f0 91 04 07 	lds	r31, 0x0704	; 0x800704 <xPendingReadyList+0x6>
 8dc:	c6 81       	ldd	r28, Z+6	; 0x06
 8de:	d7 81       	ldd	r29, Z+7	; 0x07
 8e0:	ce 01       	movw	r24, r28
 8e2:	0c 96       	adiw	r24, 0x0c	; 12
 8e4:	26 dc       	rcall	.-1972   	; 0x132 <uxListRemove>
 8e6:	8e 01       	movw	r16, r28
 8e8:	0e 5f       	subi	r16, 0xFE	; 254
 8ea:	1f 4f       	sbci	r17, 0xFF	; 255
 8ec:	c8 01       	movw	r24, r16
 8ee:	21 dc       	rcall	.-1982   	; 0x132 <uxListRemove>
 8f0:	8e 89       	ldd	r24, Y+22	; 0x16
 8f2:	90 91 f0 06 	lds	r25, 0x06F0	; 0x8006f0 <uxTopReadyPriority>
 8f6:	98 17       	cp	r25, r24
 8f8:	10 f4       	brcc	.+4      	; 0x8fe <xTaskResumeAll+0x6e>
 8fa:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxTopReadyPriority>
 8fe:	f8 9e       	mul	r15, r24
 900:	c0 01       	movw	r24, r0
 902:	11 24       	eor	r1, r1
 904:	b8 01       	movw	r22, r16
 906:	83 5e       	subi	r24, 0xE3	; 227
 908:	98 4f       	sbci	r25, 0xF8	; 248
 90a:	f2 db       	rcall	.-2076   	; 0xf0 <vListInsertEnd>
 90c:	e0 91 41 07 	lds	r30, 0x0741	; 0x800741 <pxCurrentTCB>
 910:	f0 91 42 07 	lds	r31, 0x0742	; 0x800742 <pxCurrentTCB+0x1>
 914:	9e 89       	ldd	r25, Y+22	; 0x16
 916:	86 89       	ldd	r24, Z+22	; 0x16
 918:	98 17       	cp	r25, r24
 91a:	c0 f2       	brcs	.-80     	; 0x8cc <xTaskResumeAll+0x3c>
 91c:	e0 92 ed 06 	sts	0x06ED, r14	; 0x8006ed <xYieldPending>
 920:	d5 cf       	rjmp	.-86     	; 0x8cc <xTaskResumeAll+0x3c>
 922:	cd 2b       	or	r28, r29
 924:	09 f0       	breq	.+2      	; 0x928 <xTaskResumeAll+0x98>
 926:	af dd       	rcall	.-1186   	; 0x486 <prvResetNextTaskUnblockTime>
 928:	c0 91 ee 06 	lds	r28, 0x06EE	; 0x8006ee <uxPendedTicks>
 92c:	cc 23       	and	r28, r28
 92e:	49 f0       	breq	.+18     	; 0x942 <xTaskResumeAll+0xb2>
 930:	d1 e0       	ldi	r29, 0x01	; 1
 932:	06 df       	rcall	.-500    	; 0x740 <xTaskIncrementTick>
 934:	81 11       	cpse	r24, r1
 936:	d0 93 ed 06 	sts	0x06ED, r29	; 0x8006ed <xYieldPending>
 93a:	c1 50       	subi	r28, 0x01	; 1
 93c:	d1 f7       	brne	.-12     	; 0x932 <xTaskResumeAll+0xa2>
 93e:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <uxPendedTicks>
 942:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <xYieldPending>
 946:	88 23       	and	r24, r24
 948:	09 f4       	brne	.+2      	; 0x94c <xTaskResumeAll+0xbc>
 94a:	b4 cf       	rjmp	.-152    	; 0x8b4 <xTaskResumeAll+0x24>
 94c:	b7 dc       	rcall	.-1682   	; 0x2bc <vPortYield>
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	0f 90       	pop	r0
 952:	0f be       	out	0x3f, r0	; 63
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	1f 91       	pop	r17
 95a:	0f 91       	pop	r16
 95c:	ff 90       	pop	r15
 95e:	ef 90       	pop	r14
 960:	08 95       	ret

00000962 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 962:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <uxSchedulerSuspended>
 966:	88 23       	and	r24, r24
 968:	21 f0       	breq	.+8      	; 0x972 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <xYieldPending>
 970:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 972:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 976:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxTopReadyPriority>
 97a:	69 e0       	ldi	r22, 0x09	; 9
 97c:	48 2f       	mov	r20, r24
 97e:	50 e0       	ldi	r21, 0x00	; 0
 980:	64 9f       	mul	r22, r20
 982:	90 01       	movw	r18, r0
 984:	65 9f       	mul	r22, r21
 986:	30 0d       	add	r19, r0
 988:	11 24       	eor	r1, r1
 98a:	f9 01       	movw	r30, r18
 98c:	e3 5e       	subi	r30, 0xE3	; 227
 98e:	f8 4f       	sbci	r31, 0xF8	; 248
 990:	90 81       	ld	r25, Z
 992:	91 11       	cpse	r25, r1
 994:	02 c0       	rjmp	.+4      	; 0x99a <vTaskSwitchContext+0x38>
 996:	81 50       	subi	r24, 0x01	; 1
 998:	f1 cf       	rjmp	.-30     	; 0x97c <vTaskSwitchContext+0x1a>
 99a:	a1 81       	ldd	r26, Z+1	; 0x01
 99c:	b2 81       	ldd	r27, Z+2	; 0x02
 99e:	12 96       	adiw	r26, 0x02	; 2
 9a0:	0d 90       	ld	r0, X+
 9a2:	bc 91       	ld	r27, X
 9a4:	a0 2d       	mov	r26, r0
 9a6:	b2 83       	std	Z+2, r27	; 0x02
 9a8:	a1 83       	std	Z+1, r26	; 0x01
 9aa:	20 5e       	subi	r18, 0xE0	; 224
 9ac:	38 4f       	sbci	r19, 0xF8	; 248
 9ae:	a2 17       	cp	r26, r18
 9b0:	b3 07       	cpc	r27, r19
 9b2:	31 f4       	brne	.+12     	; 0x9c0 <vTaskSwitchContext+0x5e>
 9b4:	12 96       	adiw	r26, 0x02	; 2
 9b6:	2d 91       	ld	r18, X+
 9b8:	3c 91       	ld	r19, X
 9ba:	13 97       	sbiw	r26, 0x03	; 3
 9bc:	32 83       	std	Z+2, r19	; 0x02
 9be:	21 83       	std	Z+1, r18	; 0x01
 9c0:	99 e0       	ldi	r25, 0x09	; 9
 9c2:	94 9f       	mul	r25, r20
 9c4:	f0 01       	movw	r30, r0
 9c6:	95 9f       	mul	r25, r21
 9c8:	f0 0d       	add	r31, r0
 9ca:	11 24       	eor	r1, r1
 9cc:	e3 5e       	subi	r30, 0xE3	; 227
 9ce:	f8 4f       	sbci	r31, 0xF8	; 248
 9d0:	01 80       	ldd	r0, Z+1	; 0x01
 9d2:	f2 81       	ldd	r31, Z+2	; 0x02
 9d4:	e0 2d       	mov	r30, r0
 9d6:	26 81       	ldd	r18, Z+6	; 0x06
 9d8:	37 81       	ldd	r19, Z+7	; 0x07
 9da:	30 93 42 07 	sts	0x0742, r19	; 0x800742 <pxCurrentTCB+0x1>
 9de:	20 93 41 07 	sts	0x0741, r18	; 0x800741 <pxCurrentTCB>
 9e2:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxTopReadyPriority>
 9e6:	08 95       	ret

000009e8 <_exit>:
 9e8:	f8 94       	cli

000009ea <__stop_program>:
 9ea:	ff cf       	rjmp	.-2      	; 0x9ea <__stop_program>
